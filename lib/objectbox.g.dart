// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/contact_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8316783866284214320),
      name: 'ContactEntity',
      lastPropertyId: const IdUid(21, 5217890726812356229),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4351130330276557209),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6681277656155428002),
            name: 'uid',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 8007405763978231032)),
        ModelProperty(
            id: const IdUid(3, 291599272388950511),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8673753180903755421),
            name: 'thumbnail',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9045566205043858677),
            name: 'photo',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2474661063164919427),
            name: 'photoOrThumbnail',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6467497606164830615),
            name: 'isStarred',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8342245145224144607),
            name: 'phones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2182704130009322887),
            name: 'emails',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7829330293751972793),
            name: 'addresses',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3974247973427046828),
            name: 'organizations',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6848958473639418979),
            name: 'websites',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2765338963016127241),
            name: 'socialMedias',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 152408150546326136),
            name: 'events',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1891071960287010057),
            name: 'notes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5641596562027018119),
            name: 'accounts',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3115535308894413559),
            name: 'groups',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 3470962927879093366),
            name: 'thumbnailFetched',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 6303511695388768247),
            name: 'photoFetched',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 6257274292252048532),
            name: 'isUnified',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 5217890726812356229),
            name: 'propertiesFetched',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 8316783866284214320),
      lastIndexId: const IdUid(1, 8007405763978231032),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ContactEntity: EntityDefinition<ContactEntity>(
        model: _entities[0],
        toOneRelations: (ContactEntity object) => [],
        toManyRelations: (ContactEntity object) => {},
        getId: (ContactEntity object) => object.id,
        setId: (ContactEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ContactEntity object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeListInt8(object.thumbnail!);
          final photoOffset =
              object.photo == null ? null : fbb.writeListInt8(object.photo!);
          final photoOrThumbnailOffset = object.photoOrThumbnail == null
              ? null
              : fbb.writeListInt8(object.photoOrThumbnail!);
          final phonesOffset =
              object.phones == null ? null : fbb.writeString(object.phones!);
          final emailsOffset =
              object.emails == null ? null : fbb.writeString(object.emails!);
          final addressesOffset = object.addresses == null
              ? null
              : fbb.writeString(object.addresses!);
          final organizationsOffset = object.organizations == null
              ? null
              : fbb.writeString(object.organizations!);
          final websitesOffset = object.websites == null
              ? null
              : fbb.writeString(object.websites!);
          final socialMediasOffset = object.socialMedias == null
              ? null
              : fbb.writeString(object.socialMedias!);
          final eventsOffset =
              object.events == null ? null : fbb.writeString(object.events!);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final accountsOffset = object.accounts == null
              ? null
              : fbb.writeString(object.accounts!);
          final groupsOffset =
              object.groups == null ? null : fbb.writeString(object.groups!);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, displayNameOffset);
          fbb.addOffset(3, thumbnailOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, photoOrThumbnailOffset);
          fbb.addBool(6, object.isStarred);
          fbb.addOffset(7, phonesOffset);
          fbb.addOffset(8, emailsOffset);
          fbb.addOffset(9, addressesOffset);
          fbb.addOffset(10, organizationsOffset);
          fbb.addOffset(11, websitesOffset);
          fbb.addOffset(12, socialMediasOffset);
          fbb.addOffset(13, eventsOffset);
          fbb.addOffset(14, notesOffset);
          fbb.addOffset(15, accountsOffset);
          fbb.addOffset(16, groupsOffset);
          fbb.addBool(17, object.thumbnailFetched);
          fbb.addBool(18, object.photoFetched);
          fbb.addBool(19, object.isUnified);
          fbb.addBool(20, object.propertiesFetched);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ContactEntity()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..thumbnail = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 10) as Uint8List?
            ..photo = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 12) as Uint8List?
            ..photoOrThumbnail = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 14) as Uint8List?
            ..isStarred =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16)
            ..phones = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..emails = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..addresses = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..organizations = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..websites = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..socialMedias = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..events = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..notes = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..accounts = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..groups = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..thumbnailFetched =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38)
            ..photoFetched =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40)
            ..isUnified =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42)
            ..propertiesFetched =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ContactEntity] entity fields to define ObjectBox queries.
class ContactEntity_ {
  /// see [ContactEntity.id]
  static final id =
      QueryIntegerProperty<ContactEntity>(_entities[0].properties[0]);

  /// see [ContactEntity.uid]
  static final uid =
      QueryStringProperty<ContactEntity>(_entities[0].properties[1]);

  /// see [ContactEntity.displayName]
  static final displayName =
      QueryStringProperty<ContactEntity>(_entities[0].properties[2]);

  /// see [ContactEntity.thumbnail]
  static final thumbnail =
      QueryByteVectorProperty<ContactEntity>(_entities[0].properties[3]);

  /// see [ContactEntity.photo]
  static final photo =
      QueryByteVectorProperty<ContactEntity>(_entities[0].properties[4]);

  /// see [ContactEntity.photoOrThumbnail]
  static final photoOrThumbnail =
      QueryByteVectorProperty<ContactEntity>(_entities[0].properties[5]);

  /// see [ContactEntity.isStarred]
  static final isStarred =
      QueryBooleanProperty<ContactEntity>(_entities[0].properties[6]);

  /// see [ContactEntity.phones]
  static final phones =
      QueryStringProperty<ContactEntity>(_entities[0].properties[7]);

  /// see [ContactEntity.emails]
  static final emails =
      QueryStringProperty<ContactEntity>(_entities[0].properties[8]);

  /// see [ContactEntity.addresses]
  static final addresses =
      QueryStringProperty<ContactEntity>(_entities[0].properties[9]);

  /// see [ContactEntity.organizations]
  static final organizations =
      QueryStringProperty<ContactEntity>(_entities[0].properties[10]);

  /// see [ContactEntity.websites]
  static final websites =
      QueryStringProperty<ContactEntity>(_entities[0].properties[11]);

  /// see [ContactEntity.socialMedias]
  static final socialMedias =
      QueryStringProperty<ContactEntity>(_entities[0].properties[12]);

  /// see [ContactEntity.events]
  static final events =
      QueryStringProperty<ContactEntity>(_entities[0].properties[13]);

  /// see [ContactEntity.notes]
  static final notes =
      QueryStringProperty<ContactEntity>(_entities[0].properties[14]);

  /// see [ContactEntity.accounts]
  static final accounts =
      QueryStringProperty<ContactEntity>(_entities[0].properties[15]);

  /// see [ContactEntity.groups]
  static final groups =
      QueryStringProperty<ContactEntity>(_entities[0].properties[16]);

  /// see [ContactEntity.thumbnailFetched]
  static final thumbnailFetched =
      QueryBooleanProperty<ContactEntity>(_entities[0].properties[17]);

  /// see [ContactEntity.photoFetched]
  static final photoFetched =
      QueryBooleanProperty<ContactEntity>(_entities[0].properties[18]);

  /// see [ContactEntity.isUnified]
  static final isUnified =
      QueryBooleanProperty<ContactEntity>(_entities[0].properties[19]);

  /// see [ContactEntity.propertiesFetched]
  static final propertiesFetched =
      QueryBooleanProperty<ContactEntity>(_entities[0].properties[20]);
}
